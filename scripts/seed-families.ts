import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as schema from '../src/database/schema';
import { persons, families } from '../src/database/schema';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω
const testPersons = [
  {
    name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
    sex: 'male' as const,
    phoneNumber: '+79001234567',
    birthDate: '1985-03-15'
  },
  {
    name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
    sex: 'female' as const,
    phoneNumber: '+79001234568',
    birthDate: '1987-07-22'
  },
  {
    name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
    sex: 'male' as const,
    phoneNumber: '+79001234569',
    birthDate: '2010-11-08'
  },
  {
    name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    sex: 'female' as const,
    phoneNumber: '+79005554433',
    birthDate: '1990-05-20'
  },
  {
    name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤',
    sex: 'male' as const,
    phoneNumber: '+79005554434',
    birthDate: '1988-12-03'
  },
  {
    name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    sex: 'female' as const,
    phoneNumber: '+79005554435',
    birthDate: '2012-04-15'
  },
  {
    name: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤',
    sex: 'male' as const,
    phoneNumber: '+79007778899',
    birthDate: '1975-09-10'
  },
  {
    name: '–û–ª—å–≥–∞ –ò–≤–∞–Ω–æ–≤–∞',
    sex: 'female' as const,
    phoneNumber: '+79007778890',
    birthDate: '1978-01-25'
  },
  {
    name: '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤',
    sex: 'male' as const,
    phoneNumber: '+79007778891',
    birthDate: '2005-06-30'
  },
  {
    name: '–¢–∞—Ç—å—è–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
    sex: 'female' as const,
    phoneNumber: '+79009990001',
    birthDate: '1982-11-12'
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–º–µ–π (ID –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
const testFamilies = [
  {
    city: '–ú–æ—Å–∫–≤–∞',
    address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1, –∫–≤. 5',
    contactPersonIndex: 0 // –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  },
  {
    city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    address: '–ù–µ–≤—Å–∫–∏–π –ø—Ä., –¥. 10, –∫–≤. 15',
    contactPersonIndex: 3 // –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  },
  {
    city: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 25, –∫–≤. 8',
    contactPersonIndex: 6 // –°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤ (—Å–µ–¥—å–º–æ–π –≤ —Å–ø–∏—Å–∫–µ)
  },
  {
    city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    address: '—É–ª. –ö—Ä–∞—Å–Ω–∞—è, –¥. 15, –∫–≤. 12',
    contactPersonIndex: 9 // –¢–∞—Ç—å—è–Ω–∞ –ö–æ–∑–ª–æ–≤–∞ (–¥–µ—Å—è—Ç—ã–π –≤ —Å–ø–∏—Å–∫–µ)
  }
];

async function seed() {
  console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  console.log('=============================================\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const requiredEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    console.error('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
    process.exit(1);
  }

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
  console.log(`   Host: ${process.env.DB_HOST}`);
  console.log(`   Port: ${process.env.DB_PORT || 5432}`);
  console.log(`   Database: ${process.env.DB_NAME}`);
  console.log(`   User: ${process.env.DB_USER}`);
  console.log(`   SSL: ${process.env.DB_SSL === 'true' ? 'enabled' : 'disabled'}`);
  console.log('');

  const pool = new Pool({
    host: process.env.DB_HOST,
    port: Number(process.env.DB_PORT) || 5432,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
  });

  const db = drizzle(pool, { schema });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await pool.query('SELECT 1');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await db.delete(families);
    await db.delete(persons);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω...');
    const createdPersons = await db.insert(persons).values(testPersons).returning();
    
    for (const person of createdPersons) {
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞: ${person.name} (ID: ${person.id})`);
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdPersons.length} –ø–µ—Ä—Å–æ–Ω\n`);

    // –°–æ–∑–¥–∞–µ–º —Å–µ–º—å–∏
    console.log('üè† –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–µ–π...');
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–º—å–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
    const familiesToInsert = testFamilies.map(family => ({
      city: family.city,
      address: family.address,
      contactPersonId: createdPersons[family.contactPersonIndex].id
    }));
    
    const createdFamilies = await db.insert(families).values(familiesToInsert).returning();
    
    for (const family of createdFamilies) {
      const contactPerson = createdPersons.find(p => p.id === family.contactPersonId);
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ–º—å—è: ${family.city} (ID: ${family.id}, –∫–æ–Ω—Ç–∞–∫—Ç: ${contactPerson?.name})`);
    }
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdFamilies.length} —Å–µ–º–µ–π\n`);

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    const personsCount = await db.select().from(persons);
    const familiesCount = await db.select().from(families);
    console.log(`   üë• –ü–µ—Ä—Å–æ–Ω: ${personsCount.length}`);
    console.log(`   üè† –°–µ–º–µ–π: ${familiesCount.length}`);

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('   GET /families - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–º–µ–π');
    console.log('   GET /families/1 - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ —Å ID 1');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.error(error);
    
    if (error instanceof Error && 'code' in error) {
      const errorCode = (error as any).code;
      
      if (errorCode === 'ECONNREFUSED') {
        console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
        console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞');
        console.log('   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        console.log('   - –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else if (errorCode === '28P01') {
        console.log('\nüí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DB_USER –∏ DB_PASSWORD');
        console.log('   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      } else if (errorCode === '3D000') {
        console.log('\nüí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DB_NAME');
        console.log('   - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      }
    }
    
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º seeder
seed(); 