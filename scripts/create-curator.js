#!/usr/bin/env node

const readline = require('readline');
const { Pool } = require('pg');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function validatePhoneNumber(phone) {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/;
  return phoneRegex.test(phone);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
function validateName(name) {
  return name.length >= 2 && name.length <= 100;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞
async function createCurator() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫—É—Ä–∞—Ç–æ—Ä–∞');
  console.log('=============================\n');

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const pool = new Pool({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 5432,
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || 'password',
      database: process.env.DB_NAME || 'pora_vstavat',
      ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    let name;
    do {
      name = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—É—Ä–∞—Ç–æ—Ä–∞: ');
      if (!validateName(name)) {
        console.log('‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤');
      }
    } while (!validateName(name));

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let phoneNumber;
    do {
      phoneNumber = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79001234567): ');
      if (!validatePhoneNumber(phoneNumber)) {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      }
    } while (!validatePhoneNumber(phoneNumber));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    const existingUser = await pool.query(
      'SELECT id, name, type FROM users WHERE phone_number = $1',
      [phoneNumber]
    );

    if (existingUser.rows.length > 0) {
      const user = existingUser.rows[0];
      console.log(`\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º ${phoneNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   –ò–º—è: ${user.name}`);
      console.log(`   –¢–∏–ø: ${user.type}`);
      
      const update = await askQuestion('\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –Ω–∞ "curator"? (y/n): ');
      
      if (update.toLowerCase() === 'y' || update.toLowerCase() === 'yes') {
        await pool.query(
          'UPDATE users SET name = $1, type = $2 WHERE phone_number = $3',
          [name, 'curator', phoneNumber]
        );
        console.log('‚úÖ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "curator"');
      } else {
        console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        process.exit(0);
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await pool.query(
        'INSERT INTO users (name, phone_number, type) VALUES ($1, $2, $3) RETURNING id, name, phone_number, type, created_at',
        [name, phoneNumber, 'curator']
      );

      const newUser = result.rows[0];
      console.log('\n‚úÖ –ö—É—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–µ:');
      console.log(`   ID: ${newUser.id}`);
      console.log(`   –ò–º—è: ${newUser.name}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${newUser.phone_number}`);
      console.log(`   –¢–∏–ø: ${newUser.type}`);
      console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${newUser.created_at}`);
    }

    await pool.end();
    console.log('\nüéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞:');
    console.error(error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
      console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞');
      console.log('   - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('   - –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  } finally {
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createCurator(); 